{"version":3,"sources":["api/thing/thing.controller.js"],"names":["index","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","Thing","find","exec","catch","findById","params","id","body","_id","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"thing.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/things              ->  index\n * POST    /api/things              ->  create\n * GET     /api/things/:id          ->  show\n * PUT     /api/things/:id          ->  upsert\n * PATCH   /api/things/:id          ->  patch\n * DELETE  /api/things/:id          ->  destroy\n */\n\n'use strict';\n\nimport { applyPatch } from 'fast-json-patch';\nimport Thing from './thing.model';\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function(entity) {\n        if(entity) {\n            return res.status(statusCode).json(entity);\n        }\n        return null;\n    };\n}\n\nfunction patchUpdates(patches) {\n    return function(entity) {\n        try {\n            applyPatch(entity, patches, /*validate*/ true);\n        } catch(err) {\n            return Promise.reject(err);\n        }\n\n        return entity.save();\n    };\n}\n\nfunction removeEntity(res) {\n    return function(entity) {\n        if(entity) {\n            return entity.remove()\n        .then(() => res.status(204).end());\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function(entity) {\n        if(!entity) {\n            res.status(404).end();\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function(err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of Things\nexport function index(req, res) {\n    return Thing.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Thing from the DB\nexport function show(req, res) {\n    return Thing.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Thing in the DB\nexport function create(req, res) {\n    return Thing.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Upserts the given Thing in the DB at the specified ID\nexport function upsert(req, res) {\n    if(req.body._id) {\n        Reflect.deleteProperty(req.body, '_id');\n    }\n    return Thing.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Thing in the DB\nexport function patch(req, res) {\n    if(req.body._id) {\n        Reflect.deleteProperty(req.body, '_id');\n    }\n    return Thing.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Thing from the DB\nexport function destroy(req, res) {\n    return Thing.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}