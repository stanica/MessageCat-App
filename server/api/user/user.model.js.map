{"version":3,"sources":["api/user/user.model.js"],"names":["mongoose","Promise","require","authTypes","UserSchema","Schema","name","String","email","type","lowercase","required","indexOf","provider","role","default","password","salt","facebook","twitter","google","github","virtual","get","_id","path","validate","length","value","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","message","args","defaultByteSize","byteSize","crypto","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n/*eslint no-invalid-this:0*/\nimport crypto from 'crypto';\nmongoose.Promise = require('bluebird');\nimport mongoose, {Schema} from 'mongoose';\nimport {registerEvents} from './user.events';\n\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\n\nvar UserSchema = new Schema({\n    name: String,\n    email: {\n        type: String,\n        lowercase: true,\n        required() {\n            if(authTypes.indexOf(this.provider) === -1) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    },\n    role: {\n        type: String,\n        default: 'user'\n    },\n    password: {\n        type: String,\n        required() {\n            if(authTypes.indexOf(this.provider) === -1) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    },\n    provider: String,\n    salt: String,\n    facebook: {},\n    twitter: {},\n    google: {},\n    github: {}\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n    .virtual('profile')\n    .get(function() {\n        return {\n            name: this.name,\n            role: this.role\n        };\n    });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n    .virtual('token')\n    .get(function() {\n        return {\n            _id: this._id,\n            role: this.role\n        };\n    });\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n    .path('email')\n    .validate(function(email) {\n        if(authTypes.indexOf(this.provider) !== -1) {\n            return true;\n        }\n        return email.length;\n    }, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema\n    .path('password')\n    .validate(function(password) {\n        if(authTypes.indexOf(this.provider) !== -1) {\n            return true;\n        }\n        return password.length;\n    }, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema\n  .path('email')\n  .validate(function(value) {\n      if(authTypes.indexOf(this.provider) !== -1) {\n          return true;\n      }\n\n      return this.constructor.findOne({ email: value }).exec()\n      .then(user => {\n          if(user) {\n              if(this.id === user.id) {\n                  return true;\n              }\n              return false;\n          }\n          return true;\n      })\n      .catch(function(err) {\n          throw err;\n      });\n  }, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n    return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n    .pre('save', function(next) {\n        // Handle new/update passwords\n        if(!this.isModified('password')) {\n            return next();\n        }\n\n        if(!validatePresenceOf(this.password)) {\n            if(authTypes.indexOf(this.provider) === -1) {\n                return next(new Error('Invalid password'));\n            } else {\n                return next();\n            }\n        }\n\n        // Make salt with a callback\n        this.makeSalt((saltErr, salt) => {\n            if(saltErr) {\n                return next(saltErr);\n            }\n            this.salt = salt;\n            this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n                if(encryptErr) {\n                    return next(encryptErr);\n                }\n                this.password = hashedPassword;\n                return next();\n            });\n        });\n    });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n    /**\n     * Authenticate - check if the passwords are the same\n     *\n     * @param {String} password\n     * @param {Function} callback\n     * @return {Boolean}\n     * @api public\n     */\n    authenticate(password, callback) {\n        if(!callback) {\n            return this.password === this.encryptPassword(password);\n        }\n\n        this.encryptPassword(password, (err, pwdGen) => {\n            if(err) {\n              if(this.facebook.id){\n                return callback({message:'You previously signed up with a Facebook account. Click the Facebook button to log in.'});\n              }\n              else {\n                return callback(err);\n              }\n            }\n\n            if(this.password === pwdGen) {\n                return callback(null, true);\n            } else {\n                return callback(null, false);\n            }\n        });\n    },\n\n    /**\n     * Make salt\n     *\n     * @param {Number} [byteSize] - Optional salt byte size, default to 16\n     * @param {Function} callback\n     * @return {String}\n     * @api public\n     */\n    makeSalt(...args) {\n        var defaultByteSize = 16;\n        let byteSize;\n        let callback;\n\n        if(typeof args[0] === 'function') {\n            callback = args[0];\n            byteSize = defaultByteSize;\n        } else if(typeof args[1] === 'function') {\n            callback = args[1];\n        } else {\n            throw new Error('Missing Callback');\n        }\n\n        if(!byteSize) {\n            byteSize = defaultByteSize;\n        }\n\n        return crypto.randomBytes(byteSize, (err, salt) => {\n            if(err) {\n                return callback(err);\n            } else {\n                return callback(null, salt.toString('base64'));\n            }\n        });\n    },\n\n    /**\n     * Encrypt password\n     *\n     * @param {String} password\n     * @param {Function} callback\n     * @return {String}\n     * @api public\n     */\n    encryptPassword(password, callback) {\n        if(!password || !this.salt) {\n            if(!callback) {\n                return null;\n            } else {\n                return callback('Missing password or salt');\n            }\n        }\n\n        var defaultIterations = 10000;\n        var defaultKeyLength = 64;\n        var salt = new Buffer(this.salt, 'base64');\n\n        if(!callback) {\n            return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength, 'sha256')\n                .toString('base64');\n        }\n\n        return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, 'sha256', (err, key) => {\n            if(err) {\n                return callback(err);\n            } else {\n                return callback(null, key.toString('base64'));\n            }\n        });\n    }\n};\n\nregisterEvents(UserSchema);\nexport default mongoose.model('User', UserSchema);\n"]}