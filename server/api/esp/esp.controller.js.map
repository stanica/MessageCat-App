{"version":3,"sources":["api/esp/esp.controller.js"],"names":["index","show","create","upsert","patch","destroy","getFollowers","https","require","fs","rimraf","path","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","err","reject","save","removeEntity","remove","then","parseInt","chipId","existsSync","resolve","console","log","end","handleEntityNotFound","handleError","send","req","user","role","Esp","find","exec","catch","email","findById","params","id","body","esp","mkdir","writeFile","_id","findOneAndUpdate","new","setDefaultsOnInsert","runValidators","get","resp","data","on","chunk","JSON","parse","users","message"],"mappings":"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","file":"esp.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/esp              ->  index\n * POST    /api/esp              ->  create\n * GET     /api/esp/:id          ->  show\n * PUT     /api/esp/:id          ->  upsert\n * PATCH   /api/esp/:id          ->  patch\n * DELETE  /api/esp/:id          ->  destroy\n */\n\n'use strict';\n\nimport { applyPatch } from 'fast-json-patch';\nimport Esp from './esp.model';\n\nconst https = require('https');\nvar fs = require('fs');\nvar rimraf = require('rimraf');\nconst path = require('path');\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      applyPatch(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          if (typeof parseInt(entity.chipId) === 'number' && fs.existsSync(path.resolve('server/uploads/' + '/' + entity.chipId + '/'))){\n            rimraf(path.resolve('server/uploads/' + '/' + entity.chipId + '/'), function () {\n              console.log('Deleted ' + entity.chipId + '/');\n            });\n          }\n          res.status(204).end()\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Esps\nexport function index(req, res) {\n  if(req.user.role === 'admin'){\n    return Esp.find().exec()\n      .then(respondWithResult(res))\n      .catch(handleError(res));\n  }\n  else {\n    return Esp.find({email:req.user.email}).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n  }\n}\n\n// Gets a single Esp from the DB\nexport function show(req, res) {\n  return Esp.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Esp in the DB\nexport function create(req, res) {\n  return Esp.create(req.body)\n    .then(esp => {\n      if (!fs.existsSync(path.resolve('server/uploads/') + '/' + esp.chipId + '/')){\n        fs.mkdir(path.resolve('server/uploads/') + '/' + esp.chipId, function(err){\n          if(err){\n            console.log('Error making folder for ' + esp.chipId, err);\n            return handleError(res)(err);\n          }\n          fs.writeFile(path.resolve('server/uploads/') + '/' + esp.chipId + '/log.txt',\"\", function(err){\n            if(err){\n              console.log('Error writing log.txt', err);\n              return handleError(res)(err);\n            }\n          });\n        });\n      }\n      return respondWithResult(res, 201)(esp);\n    })\n    .catch(handleError(res));\n}\n\n// Upserts the given Esp in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n  return Esp.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Esp in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n  return Esp.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Esp from the DB\nexport function destroy(req, res) {\n  return Esp.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n\n// Get Instagram followers for a username\nexport function getFollowers(req, res){\n  https.get('https://www.instagram.com/web/search/topsearch/?query=' + req.params.id, (resp) => {\n    let data = '';\n   \n    // A chunk of data has been recieved.\n    resp.on('data', (chunk) => {\n      data += chunk;\n    });\n   \n    // The whole response has been received. Print out the result.\n    resp.on('end', () => {\n      console.log(JSON.parse(data).users[0]);\n      return respondWithResult(res)(JSON.parse(data).users[0].user);\n    });\n   \n  }).on(\"error\", (err) => {\n    console.log(\"Error: \" + err.message);\n    return handleError(res)(err);\n  });\n}\n"]}