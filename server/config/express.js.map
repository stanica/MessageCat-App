{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","express","static","path","join","config","root","set","engine","require","renderFile","bodyParser","urlencoded","extended","json","passport","initialize","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","mongoose","connection","db","process","SAUCE_USERNAME","csrf","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection"],"mappings":"AAAA;;;;AAIA;;;;;;kBAmBe,UAASA,GAAT,EAAc;AACzB,QAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEA,QAAGD,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AACxCD,YAAIG,GAAJ,CAAQC,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACH;;AAED,QAAGR,QAAQ,YAAX,EAAyB;AACrBD,YAAIG,GAAJ,CAAQ,4BAAQG,eAAKC,IAAL,CAAUC,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACH;;AAEDT,QAAIU,GAAJ,CAAQ,SAAR,EAAmBJ,eAAKC,IAAL,CAAUC,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAT,QAAIG,GAAJ,CAAQC,kBAAQC,MAAR,CAAeL,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,QAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,QAAIU,GAAJ,CAAQ,OAAR,EAAkB,GAAEF,sBAAOC,IAAK,eAAhC;AACAT,QAAIW,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAb,QAAIU,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACA;AACAV,QAAIG,GAAJ,CAAQW,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAhB,QAAIG,GAAJ,CAAQW,qBAAWG,IAAX,EAAR;AACAjB,QAAIG,GAAJ,CAAQ,+BAAR;AACAH,QAAIG,GAAJ,CAAQ,6BAAR;AACAH,QAAIG,GAAJ,CAAQe,mBAASC,UAAT,EAAR;;AAGA;AACA;AACA;AACAnB,QAAIG,GAAJ,CAAQ,8BAAQ;AACZiB,gBAAQZ,sBAAOa,OAAP,CAAeC,OADX;AAEZC,2BAAmB,IAFP;AAGZC,gBAAQ,KAHI;AAIZC,eAAO,IAAIC,UAAJ,CAAe;AAClBC,gCAAoBC,mBAASC,UADX;AAElBC,gBAAI;AAFc,SAAf;AAJK,KAAR,CAAR;;AAUA;;;;AAIA,QAAG7B,QAAQ,MAAR,IAAkBA,QAAQ,aAA1B,IAA2C,CAAC8B,QAAQ9B,GAAR,CAAY+B,cAA3D,EAA2E;AAAE;AACzEhC,YAAIG,GAAJ,CAAQ,qBAAM;AACV8B,kBAAM,KADI;AAEVC,oBAAQ,YAFE;AAGVC,kBAAM;AACFC,wBAAQ,QADN,EACgB;AAClBC,mCAAmB,IAFjB;AAGFC,yBAAS;AAHP,aAHI;AAQVC,2BAAe;AARL,SAAN,CAAR;AAUH;;AAED,QAAGtC,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AACxCD,YAAIG,GAAJ,CAAQ,6BAAR,EADwC,CACf;AAC5B;AACJ,C;;AA5ED;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIuB,aAAa,4BAAaJ,wBAAb,CAAjB;AAZA","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\n//import compression from 'compression';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport passport from 'passport';\nimport session from 'express-session';\nimport connectMongo from 'connect-mongo';\nimport mongoose from 'mongoose';\nvar MongoStore = connectMongo(session);\n\nexport default function(app) {\n    var env = app.get('env');\n\n    if(env === 'development' || env === 'test') {\n        app.use(express.static(path.join(config.root, '.tmp')));\n    }\n\n    if(env === 'production') {\n        app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n    }\n\n    app.set('appPath', path.join(config.root, 'client'));\n    app.use(express.static(app.get('appPath')));\n    app.use(morgan('dev'));\n\n    app.set('views', `${config.root}/server/views`);\n    app.engine('html', require('ejs').renderFile);\n    app.set('view engine', 'html');\n    //app.use(compression());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    app.use(methodOverride());\n    app.use(cookieParser());\n    app.use(passport.initialize());\n\n\n    // Persist sessions with MongoStore / sequelizeStore\n    // We need to enable sessions for passport-twitter because it's an\n    // oauth 1.0 strategy, and Lusca depends on sessions\n    app.use(session({\n        secret: config.secrets.session,\n        saveUninitialized: true,\n        resave: false,\n        store: new MongoStore({\n            mongooseConnection: mongoose.connection,\n            db: 'message-cat'\n        })\n    }));\n\n    /**\n     * Lusca - express server security\n     * https://github.com/krakenjs/lusca\n     */\n    if(env !== 'test' && env !== 'development' && !process.env.SAUCE_USERNAME) { // eslint-disable-line no-process-env\n        app.use(lusca({\n            csrf: false,\n            xframe: 'SAMEORIGIN',\n            hsts: {\n                maxAge: 31536000, //1 year, in seconds\n                includeSubDomains: true,\n                preload: true\n            },\n            xssProtection: false\n        }));\n    }\n\n    if(env === 'development' || env === 'test') {\n        app.use(errorHandler()); // Error handler - has to be last\n    }\n}\n"]}