{"version":3,"sources":["config/seed.js"],"names":["seedDatabaseIfNeeded","config","seedDB","resolve","promises","thingPromise","Thing","find","remove","then","create","name","info","console","log","catch","err","push","userPromise","User","provider","email","password","role","all"],"mappings":"AAAA;;;;;AAKA;;;;;;;;;;kBAKwBA,oB;;AAJxB;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,oBAAT,GAAgC;AAC3C,QAAG,CAACC,sBAAOC,MAAX,EAAmB;AACf,eAAO,kBAAQC,OAAR,EAAP;AACH;;AAGD,QAAIC,WAAW,EAAf;;AAEA,QAAIC,eAAeC,gBAAMC,IAAN,CAAW,EAAX,EAAeC,MAAf,GAClBC,IADkB,CACb,MAAMH,gBAAMI,MAAN,CAAa;AACrBC,cAAM,mBADe;AAErBC,cAAM,0GACE;AAHa,KAAb,EAIT;AACCD,cAAM,+BADP;AAECC,cAAM;AAFP,KAJS,EAOT;AACCD,cAAM,oBADP;AAECC,cAAM,0GACE;AAHT,KAPS,EAWT;AACCD,cAAM,mBADP;AAECC,cAAM;AAFP,KAXS,EAcT;AACCD,cAAM,iBADP;AAECC,cAAM,yFACI;AAHX,KAdS,EAkBT;AACCD,cAAM,kBADP;AAECC,cAAM;AAFP,KAlBS,CADO,EAuBlBH,IAvBkB,CAuBb,MAAMI,QAAQC,GAAR,CAAY,4BAAZ,CAvBO,EAwBlBC,KAxBkB,CAwBZC,OAAOH,QAAQC,GAAR,CAAY,yBAAZ,EAAuCE,GAAvC,CAxBK,CAAnB;AAyBAZ,aAASa,IAAT,CAAcZ,YAAd;;AAEA,QAAIa,cAAcC,eAAKZ,IAAL,CAAU,EAAV,EAAcC,MAAd,GACjBC,IADiB,CACZ,MAAMU,eAAKT,MAAL,CAAY;AACpBU,kBAAU,OADU;AAEpBT,cAAM,WAFc;AAGpBU,eAAO,kBAHa;AAIpBC,kBAAU;AAJU,KAAZ,EAKT;AACCF,kBAAU,OADX;AAECG,cAAM,OAFP;AAGCZ,cAAM,OAHP;AAICU,eAAO,mBAJR;AAKCC,kBAAU;AALX,KALS,EAYTb,IAZS,CAYJ,MAAMI,QAAQC,GAAR,CAAY,2BAAZ,CAZF,EAaTC,KAbS,CAaHC,OAAOH,QAAQC,GAAR,CAAY,wBAAZ,EAAsCE,GAAtC,CAbJ,CADM,CAAlB;AAeAZ,aAASa,IAAT,CAAcC,WAAd;;AAEA,WAAO,kBAAQM,GAAR,CAAYpB,QAAZ,CAAP;AACH","file":"seed.js","sourcesContent":["/**\n * Populate DB with sample data on server start\n * to disable, edit config/environment/index.js, and set `seedDB: false`\n */\n\n'use strict';\nimport Thing from '../api/thing/thing.model';\nimport User from '../api/user/user.model';\nimport config from './environment/';\n\nexport default function seedDatabaseIfNeeded() {\n    if(!config.seedDB) {\n        return Promise.resolve();\n    }\n\n\n    let promises = [];\n\n    let thingPromise = Thing.find({}).remove()\n    .then(() => Thing.create({\n        name: 'Development Tools',\n        info: 'Integration with popular tools such as Webpack, Babel, TypeScript, Karma, Mocha, ESLint, Protractor, '\n              + 'Pug, Stylus, Sass, and Less.'\n    }, {\n        name: 'Server and Client integration',\n        info: 'Built with a powerful and fun stack: MongoDB, Express, Angular, and Node.'\n    }, {\n        name: 'Smart Build System',\n        info: 'Build system ignores `spec` files, allowing you to keep tests alongside code. Automatic injection of '\n              + 'scripts and styles into your app.html'\n    }, {\n        name: 'Modular Structure',\n        info: 'Best practice client and server structures allow for more code reusability and maximum scalability'\n    }, {\n        name: 'Optimized Build',\n        info: 'Build process packs up your templates as a single JavaScript payload, minifies your '\n                + 'scripts/css/images, and rewrites asset names for caching.'\n    }, {\n        name: 'Deployment Ready',\n        info: 'Easily deploy your app to Heroku or Openshift with the heroku and openshift subgenerators'\n    }))\n    .then(() => console.log('finished populating things'))\n    .catch(err => console.log('error populating things', err));\n    promises.push(thingPromise);\n\n    let userPromise = User.find({}).remove()\n    .then(() => User.create({\n        provider: 'local',\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'test'\n    }, {\n        provider: 'local',\n        role: 'admin',\n        name: 'Admin',\n        email: 'admin@example.com',\n        password: 'admin'\n    })\n      .then(() => console.log('finished populating users'))\n      .catch(err => console.log('error populating users', err)));\n    promises.push(userPromise);\n\n    return Promise.all(promises);\n}\n"]}